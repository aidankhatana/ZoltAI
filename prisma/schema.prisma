// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roadmaps      Roadmap[]
  userProgress  UserProgress[]
}

model Roadmap {
  id           String   @id @default(cuid())
  title        String
  description  String
  topic        String
  difficulty   String
  estimatedTime String
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  steps        Step[]
  userProgress UserProgress[]

  @@index([userId])
  @@index([topic])
  @@index([isPublic])
}

model Step {
  id            String   @id @default(cuid())
  title         String
  description   String
  content       String   @db.Text
  order         Int
  estimatedTime String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  roadmapId     String
  roadmap       Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  
  resources     Resource[]
  quiz          Quiz?
  userProgress  UserProgress[]

  @@index([roadmapId])
}

model Resource {
  id        String   @id @default(cuid())
  title     String
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stepId    String
  step      Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([stepId])
}

model Quiz {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stepId    String   @unique
  step      Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  questions Question[]

  @@index([stepId])
}

model Question {
  id           String   @id @default(cuid())
  text         String
  options      String[] // Array of strings for multiple choice options
  correctOption Int     // Index of the correct answer (0-based)
  explanation  String?  // Optional explanation for the answer
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  quizId       String
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model UserProgress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  quizScore   Int?      // Optional, only set if they've completed the quiz
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roadmapId   String
  roadmap     Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  
  stepId      String
  step        Step      @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId, stepId])
  @@index([userId])
  @@index([roadmapId])
  @@index([stepId])
}
